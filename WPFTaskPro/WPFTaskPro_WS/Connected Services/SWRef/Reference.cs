//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WPFTaskPro_WS.SWRef {
    using System.Data;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SWRef.WebService1Soap")]
    public interface WebService1Soap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/userCreate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string userCreate(string nickname, string username, string lastname, string email, string userpassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/userCreate", ReplyAction="*")]
        System.Threading.Tasks.Task<string> userCreateAsync(string nickname, string username, string lastname, string email, string userpassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/userReadById", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet userReadById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/userReadById", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> userReadByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/userReadAll", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet userReadAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/userReadAll", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> userReadAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/userReadByNickname", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet userReadByNickname(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/userReadByNickname", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> userReadByNicknameAsync(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/userReadByEmail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet userReadByEmail(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/userReadByEmail", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> userReadByEmailAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/userUpdate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string userUpdate(int id, string nickname, string username, string lastname, string email, string userpassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/userUpdate", ReplyAction="*")]
        System.Threading.Tasks.Task<string> userUpdateAsync(int id, string nickname, string username, string lastname, string email, string userpassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/userDelete", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string userDelete(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/userDelete", ReplyAction="*")]
        System.Threading.Tasks.Task<string> userDeleteAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/userLogin", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet userLogin(string nicknameOrEmail, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/userLogin", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> userLoginAsync(string nicknameOrEmail, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/listCreate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string listCreate(string listname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/listCreate", ReplyAction="*")]
        System.Threading.Tasks.Task<string> listCreateAsync(string listname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/listReadById", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet listReadById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/listReadById", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> listReadByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/listReadByUserID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet listReadByUserID(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/listReadByUserID", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> listReadByUserIDAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/listReadAll", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet listReadAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/listReadAll", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> listReadAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/listUpdate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string listUpdate(int id, string listname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/listUpdate", ReplyAction="*")]
        System.Threading.Tasks.Task<string> listUpdateAsync(int id, string listname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/listDelete", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string listDelete(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/listDelete", ReplyAction="*")]
        System.Threading.Tasks.Task<string> listDeleteAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/listAccessCreateUpdate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string listAccessCreateUpdate(int idUsuario, int idLista, string accessType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/listAccessCreateUpdate", ReplyAction="*")]
        System.Threading.Tasks.Task<string> listAccessCreateUpdateAsync(int idUsuario, int idLista, string accessType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/listAccessReadById", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet listAccessReadById(int idUser, int idList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/listAccessReadById", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> listAccessReadByIdAsync(int idUser, int idList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/listAccessReadByListID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet listAccessReadByListID(int idList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/listAccessReadByListID", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> listAccessReadByListIDAsync(int idList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/listAccessReadAll", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet listAccessReadAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/listAccessReadAll", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> listAccessReadAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/listAccessDelete", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string listAccessDelete(int idUser, int idList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/listAccessDelete", ReplyAction="*")]
        System.Threading.Tasks.Task<string> listAccessDeleteAsync(int idUser, int idList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/taskCreate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string taskCreate(string title, string taskdescription, string taskStatus, string isfavorite, string isonmyday, string startdate, string enddate, string taskPriority, int list_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/taskCreate", ReplyAction="*")]
        System.Threading.Tasks.Task<string> taskCreateAsync(string title, string taskdescription, string taskStatus, string isfavorite, string isonmyday, string startdate, string enddate, string taskPriority, int list_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/taskReadById", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet taskReadById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/taskReadById", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> taskReadByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/taskReadByListId", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet taskReadByListId(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/taskReadByListId", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> taskReadByListIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/taskReadByUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet taskReadByUser(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/taskReadByUser", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> taskReadByUserAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/taskReadByUserFavorite", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet taskReadByUserFavorite(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/taskReadByUserFavorite", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> taskReadByUserFavoriteAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/taskReadByUserOnMyDay", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet taskReadByUserOnMyDay(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/taskReadByUserOnMyDay", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> taskReadByUserOnMyDayAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/taskReadAll", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet taskReadAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/taskReadAll", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> taskReadAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/taskUpdate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string taskUpdate(int id, string title, string taskdescription, string taskStatus, string isfavorite, string isonmyday, string startdate, string enddate, string taskPriority, int list_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/taskUpdate", ReplyAction="*")]
        System.Threading.Tasks.Task<string> taskUpdateAsync(int id, string title, string taskdescription, string taskStatus, string isfavorite, string isonmyday, string startdate, string enddate, string taskPriority, int list_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/taskDelete", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string taskDelete(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/taskDelete", ReplyAction="*")]
        System.Threading.Tasks.Task<string> taskDeleteAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/tagCreate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string tagCreate(string tagname, int idList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/tagCreate", ReplyAction="*")]
        System.Threading.Tasks.Task<string> tagCreateAsync(string tagname, int idList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/tagReadById", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet tagReadById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/tagReadById", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> tagReadByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/tagReadByListId", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet tagReadByListId(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/tagReadByListId", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> tagReadByListIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/tagReadByTaskId", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet tagReadByTaskId(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/tagReadByTaskId", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> tagReadByTaskIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/tagReadAll", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet tagReadAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/tagReadAll", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> tagReadAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/tagUpdate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string tagUpdate(int id, string tagname, int idList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/tagUpdate", ReplyAction="*")]
        System.Threading.Tasks.Task<string> tagUpdateAsync(int id, string tagname, int idList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/tagDelete", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string tagDelete(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/tagDelete", ReplyAction="*")]
        System.Threading.Tasks.Task<string> tagDeleteAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/taskTagCreate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string taskTagCreate(int tag_id, int task_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/taskTagCreate", ReplyAction="*")]
        System.Threading.Tasks.Task<string> taskTagCreateAsync(int tag_id, int task_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/taskTagReadById", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet taskTagReadById(int tag_id, int task_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/taskTagReadById", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> taskTagReadByIdAsync(int tag_id, int task_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/taskTagReadAll", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet taskTagReadAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/taskTagReadAll", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> taskTagReadAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/taskTagDelete", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string taskTagDelete(int tag_id, int task_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/taskTagDelete", ReplyAction="*")]
        System.Threading.Tasks.Task<string> taskTagDeleteAsync(int tag_id, int task_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/attachmentCreate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string attachmentCreate(string datefile, string attachmentFilename, string attachmentLink, int user_id, int task_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/attachmentCreate", ReplyAction="*")]
        System.Threading.Tasks.Task<string> attachmentCreateAsync(string datefile, string attachmentFilename, string attachmentLink, int user_id, int task_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/attachmentReadById", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet attachmentReadById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/attachmentReadById", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> attachmentReadByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/attachmentReadByTaskId", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet attachmentReadByTaskId(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/attachmentReadByTaskId", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> attachmentReadByTaskIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/attachmentReadAll", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet attachmentReadAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/attachmentReadAll", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> attachmentReadAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/attachmentUpdate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string attachmentUpdate(int id, string datefile, string attachmentFilename, string attachmentLink, int user_id, int task_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/attachmentUpdate", ReplyAction="*")]
        System.Threading.Tasks.Task<string> attachmentUpdateAsync(int id, string datefile, string attachmentFilename, string attachmentLink, int user_id, int task_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/attachmentDelete", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string attachmentDelete(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/attachmentDelete", ReplyAction="*")]
        System.Threading.Tasks.Task<string> attachmentDeleteAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/commentCreate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string commentCreate(string dateComment, string commentUser, int user_id, int task_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/commentCreate", ReplyAction="*")]
        System.Threading.Tasks.Task<string> commentCreateAsync(string dateComment, string commentUser, int user_id, int task_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/commentReadById", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet commentReadById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/commentReadById", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> commentReadByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/commentReadByTaskId", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet commentReadByTaskId(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/commentReadByTaskId", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> commentReadByTaskIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/commentReadAll", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet commentReadAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/commentReadAll", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> commentReadAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/timeTrackCreate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string timeTrackCreate(string startTime, string endTime, string isFinished, int user_id, int task_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/timeTrackCreate", ReplyAction="*")]
        System.Threading.Tasks.Task<string> timeTrackCreateAsync(string startTime, string endTime, string isFinished, int user_id, int task_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/timeTrackReadById", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet timeTrackReadById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/timeTrackReadById", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> timeTrackReadByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/timeTrackReadByTaskId", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet timeTrackReadByTaskId(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/timeTrackReadByTaskId", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> timeTrackReadByTaskIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/timeTrackReadAll", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet timeTrackReadAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/timeTrackReadAll", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> timeTrackReadAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/timeTrackUpdate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string timeTrackUpdate(int id, string startTime, string endTime, string isFinished, int user_id, int task_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/timeTrackUpdate", ReplyAction="*")]
        System.Threading.Tasks.Task<string> timeTrackUpdateAsync(int id, string startTime, string endTime, string isFinished, int user_id, int task_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/timeTrackDelete", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string timeTrackDelete(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/timeTrackDelete", ReplyAction="*")]
        System.Threading.Tasks.Task<string> timeTrackDeleteAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/memberCreate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string memberCreate(int user_id, int task_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/memberCreate", ReplyAction="*")]
        System.Threading.Tasks.Task<string> memberCreateAsync(int user_id, int task_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/memberReadById", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet memberReadById(int user_id, int task_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/memberReadById", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> memberReadByIdAsync(int user_id, int task_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/memberReadByTaskId", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet memberReadByTaskId(int task_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/memberReadByTaskId", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> memberReadByTaskIdAsync(int task_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/memberReadAll", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet memberReadAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/memberReadAll", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> memberReadAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/memberDelete", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string memberDelete(int user_id, int task_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/memberDelete", ReplyAction="*")]
        System.Threading.Tasks.Task<string> memberDeleteAsync(int user_id, int task_id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface WebService1SoapChannel : WPFTaskPro_WS.SWRef.WebService1Soap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WebService1SoapClient : System.ServiceModel.ClientBase<WPFTaskPro_WS.SWRef.WebService1Soap>, WPFTaskPro_WS.SWRef.WebService1Soap {
        
        public WebService1SoapClient() {
        }
        
        public WebService1SoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WebService1SoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WebService1SoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WebService1SoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string userCreate(string nickname, string username, string lastname, string email, string userpassword) {
            return base.Channel.userCreate(nickname, username, lastname, email, userpassword);
        }
        
        public System.Threading.Tasks.Task<string> userCreateAsync(string nickname, string username, string lastname, string email, string userpassword) {
            return base.Channel.userCreateAsync(nickname, username, lastname, email, userpassword);
        }
        
        public System.Data.DataSet userReadById(int id) {
            return base.Channel.userReadById(id);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> userReadByIdAsync(int id) {
            return base.Channel.userReadByIdAsync(id);
        }
        
        public System.Data.DataSet userReadAll() {
            return base.Channel.userReadAll();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> userReadAllAsync() {
            return base.Channel.userReadAllAsync();
        }
        
        public System.Data.DataSet userReadByNickname(string nickname) {
            return base.Channel.userReadByNickname(nickname);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> userReadByNicknameAsync(string nickname) {
            return base.Channel.userReadByNicknameAsync(nickname);
        }
        
        public System.Data.DataSet userReadByEmail(string email) {
            return base.Channel.userReadByEmail(email);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> userReadByEmailAsync(string email) {
            return base.Channel.userReadByEmailAsync(email);
        }
        
        public string userUpdate(int id, string nickname, string username, string lastname, string email, string userpassword) {
            return base.Channel.userUpdate(id, nickname, username, lastname, email, userpassword);
        }
        
        public System.Threading.Tasks.Task<string> userUpdateAsync(int id, string nickname, string username, string lastname, string email, string userpassword) {
            return base.Channel.userUpdateAsync(id, nickname, username, lastname, email, userpassword);
        }
        
        public string userDelete(int id) {
            return base.Channel.userDelete(id);
        }
        
        public System.Threading.Tasks.Task<string> userDeleteAsync(int id) {
            return base.Channel.userDeleteAsync(id);
        }
        
        public System.Data.DataSet userLogin(string nicknameOrEmail, string password) {
            return base.Channel.userLogin(nicknameOrEmail, password);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> userLoginAsync(string nicknameOrEmail, string password) {
            return base.Channel.userLoginAsync(nicknameOrEmail, password);
        }
        
        public string listCreate(string listname) {
            return base.Channel.listCreate(listname);
        }
        
        public System.Threading.Tasks.Task<string> listCreateAsync(string listname) {
            return base.Channel.listCreateAsync(listname);
        }
        
        public System.Data.DataSet listReadById(int id) {
            return base.Channel.listReadById(id);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> listReadByIdAsync(int id) {
            return base.Channel.listReadByIdAsync(id);
        }
        
        public System.Data.DataSet listReadByUserID(int id) {
            return base.Channel.listReadByUserID(id);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> listReadByUserIDAsync(int id) {
            return base.Channel.listReadByUserIDAsync(id);
        }
        
        public System.Data.DataSet listReadAll() {
            return base.Channel.listReadAll();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> listReadAllAsync() {
            return base.Channel.listReadAllAsync();
        }
        
        public string listUpdate(int id, string listname) {
            return base.Channel.listUpdate(id, listname);
        }
        
        public System.Threading.Tasks.Task<string> listUpdateAsync(int id, string listname) {
            return base.Channel.listUpdateAsync(id, listname);
        }
        
        public string listDelete(int id) {
            return base.Channel.listDelete(id);
        }
        
        public System.Threading.Tasks.Task<string> listDeleteAsync(int id) {
            return base.Channel.listDeleteAsync(id);
        }
        
        public string listAccessCreateUpdate(int idUsuario, int idLista, string accessType) {
            return base.Channel.listAccessCreateUpdate(idUsuario, idLista, accessType);
        }
        
        public System.Threading.Tasks.Task<string> listAccessCreateUpdateAsync(int idUsuario, int idLista, string accessType) {
            return base.Channel.listAccessCreateUpdateAsync(idUsuario, idLista, accessType);
        }
        
        public System.Data.DataSet listAccessReadById(int idUser, int idList) {
            return base.Channel.listAccessReadById(idUser, idList);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> listAccessReadByIdAsync(int idUser, int idList) {
            return base.Channel.listAccessReadByIdAsync(idUser, idList);
        }
        
        public System.Data.DataSet listAccessReadByListID(int idList) {
            return base.Channel.listAccessReadByListID(idList);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> listAccessReadByListIDAsync(int idList) {
            return base.Channel.listAccessReadByListIDAsync(idList);
        }
        
        public System.Data.DataSet listAccessReadAll() {
            return base.Channel.listAccessReadAll();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> listAccessReadAllAsync() {
            return base.Channel.listAccessReadAllAsync();
        }
        
        public string listAccessDelete(int idUser, int idList) {
            return base.Channel.listAccessDelete(idUser, idList);
        }
        
        public System.Threading.Tasks.Task<string> listAccessDeleteAsync(int idUser, int idList) {
            return base.Channel.listAccessDeleteAsync(idUser, idList);
        }
        
        public string taskCreate(string title, string taskdescription, string taskStatus, string isfavorite, string isonmyday, string startdate, string enddate, string taskPriority, int list_id) {
            return base.Channel.taskCreate(title, taskdescription, taskStatus, isfavorite, isonmyday, startdate, enddate, taskPriority, list_id);
        }
        
        public System.Threading.Tasks.Task<string> taskCreateAsync(string title, string taskdescription, string taskStatus, string isfavorite, string isonmyday, string startdate, string enddate, string taskPriority, int list_id) {
            return base.Channel.taskCreateAsync(title, taskdescription, taskStatus, isfavorite, isonmyday, startdate, enddate, taskPriority, list_id);
        }
        
        public System.Data.DataSet taskReadById(int id) {
            return base.Channel.taskReadById(id);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> taskReadByIdAsync(int id) {
            return base.Channel.taskReadByIdAsync(id);
        }
        
        public System.Data.DataSet taskReadByListId(int id) {
            return base.Channel.taskReadByListId(id);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> taskReadByListIdAsync(int id) {
            return base.Channel.taskReadByListIdAsync(id);
        }
        
        public System.Data.DataSet taskReadByUser(int id) {
            return base.Channel.taskReadByUser(id);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> taskReadByUserAsync(int id) {
            return base.Channel.taskReadByUserAsync(id);
        }
        
        public System.Data.DataSet taskReadByUserFavorite(int id) {
            return base.Channel.taskReadByUserFavorite(id);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> taskReadByUserFavoriteAsync(int id) {
            return base.Channel.taskReadByUserFavoriteAsync(id);
        }
        
        public System.Data.DataSet taskReadByUserOnMyDay(int id) {
            return base.Channel.taskReadByUserOnMyDay(id);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> taskReadByUserOnMyDayAsync(int id) {
            return base.Channel.taskReadByUserOnMyDayAsync(id);
        }
        
        public System.Data.DataSet taskReadAll() {
            return base.Channel.taskReadAll();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> taskReadAllAsync() {
            return base.Channel.taskReadAllAsync();
        }
        
        public string taskUpdate(int id, string title, string taskdescription, string taskStatus, string isfavorite, string isonmyday, string startdate, string enddate, string taskPriority, int list_id) {
            return base.Channel.taskUpdate(id, title, taskdescription, taskStatus, isfavorite, isonmyday, startdate, enddate, taskPriority, list_id);
        }
        
        public System.Threading.Tasks.Task<string> taskUpdateAsync(int id, string title, string taskdescription, string taskStatus, string isfavorite, string isonmyday, string startdate, string enddate, string taskPriority, int list_id) {
            return base.Channel.taskUpdateAsync(id, title, taskdescription, taskStatus, isfavorite, isonmyday, startdate, enddate, taskPriority, list_id);
        }
        
        public string taskDelete(int id) {
            return base.Channel.taskDelete(id);
        }
        
        public System.Threading.Tasks.Task<string> taskDeleteAsync(int id) {
            return base.Channel.taskDeleteAsync(id);
        }
        
        public string tagCreate(string tagname, int idList) {
            return base.Channel.tagCreate(tagname, idList);
        }
        
        public System.Threading.Tasks.Task<string> tagCreateAsync(string tagname, int idList) {
            return base.Channel.tagCreateAsync(tagname, idList);
        }
        
        public System.Data.DataSet tagReadById(int id) {
            return base.Channel.tagReadById(id);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> tagReadByIdAsync(int id) {
            return base.Channel.tagReadByIdAsync(id);
        }
        
        public System.Data.DataSet tagReadByListId(int id) {
            return base.Channel.tagReadByListId(id);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> tagReadByListIdAsync(int id) {
            return base.Channel.tagReadByListIdAsync(id);
        }
        
        public System.Data.DataSet tagReadByTaskId(int id) {
            return base.Channel.tagReadByTaskId(id);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> tagReadByTaskIdAsync(int id) {
            return base.Channel.tagReadByTaskIdAsync(id);
        }
        
        public System.Data.DataSet tagReadAll() {
            return base.Channel.tagReadAll();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> tagReadAllAsync() {
            return base.Channel.tagReadAllAsync();
        }
        
        public string tagUpdate(int id, string tagname, int idList) {
            return base.Channel.tagUpdate(id, tagname, idList);
        }
        
        public System.Threading.Tasks.Task<string> tagUpdateAsync(int id, string tagname, int idList) {
            return base.Channel.tagUpdateAsync(id, tagname, idList);
        }
        
        public string tagDelete(int id) {
            return base.Channel.tagDelete(id);
        }
        
        public System.Threading.Tasks.Task<string> tagDeleteAsync(int id) {
            return base.Channel.tagDeleteAsync(id);
        }
        
        public string taskTagCreate(int tag_id, int task_id) {
            return base.Channel.taskTagCreate(tag_id, task_id);
        }
        
        public System.Threading.Tasks.Task<string> taskTagCreateAsync(int tag_id, int task_id) {
            return base.Channel.taskTagCreateAsync(tag_id, task_id);
        }
        
        public System.Data.DataSet taskTagReadById(int tag_id, int task_id) {
            return base.Channel.taskTagReadById(tag_id, task_id);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> taskTagReadByIdAsync(int tag_id, int task_id) {
            return base.Channel.taskTagReadByIdAsync(tag_id, task_id);
        }
        
        public System.Data.DataSet taskTagReadAll() {
            return base.Channel.taskTagReadAll();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> taskTagReadAllAsync() {
            return base.Channel.taskTagReadAllAsync();
        }
        
        public string taskTagDelete(int tag_id, int task_id) {
            return base.Channel.taskTagDelete(tag_id, task_id);
        }
        
        public System.Threading.Tasks.Task<string> taskTagDeleteAsync(int tag_id, int task_id) {
            return base.Channel.taskTagDeleteAsync(tag_id, task_id);
        }
        
        public string attachmentCreate(string datefile, string attachmentFilename, string attachmentLink, int user_id, int task_id) {
            return base.Channel.attachmentCreate(datefile, attachmentFilename, attachmentLink, user_id, task_id);
        }
        
        public System.Threading.Tasks.Task<string> attachmentCreateAsync(string datefile, string attachmentFilename, string attachmentLink, int user_id, int task_id) {
            return base.Channel.attachmentCreateAsync(datefile, attachmentFilename, attachmentLink, user_id, task_id);
        }
        
        public System.Data.DataSet attachmentReadById(int id) {
            return base.Channel.attachmentReadById(id);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> attachmentReadByIdAsync(int id) {
            return base.Channel.attachmentReadByIdAsync(id);
        }
        
        public System.Data.DataSet attachmentReadByTaskId(int id) {
            return base.Channel.attachmentReadByTaskId(id);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> attachmentReadByTaskIdAsync(int id) {
            return base.Channel.attachmentReadByTaskIdAsync(id);
        }
        
        public System.Data.DataSet attachmentReadAll() {
            return base.Channel.attachmentReadAll();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> attachmentReadAllAsync() {
            return base.Channel.attachmentReadAllAsync();
        }
        
        public string attachmentUpdate(int id, string datefile, string attachmentFilename, string attachmentLink, int user_id, int task_id) {
            return base.Channel.attachmentUpdate(id, datefile, attachmentFilename, attachmentLink, user_id, task_id);
        }
        
        public System.Threading.Tasks.Task<string> attachmentUpdateAsync(int id, string datefile, string attachmentFilename, string attachmentLink, int user_id, int task_id) {
            return base.Channel.attachmentUpdateAsync(id, datefile, attachmentFilename, attachmentLink, user_id, task_id);
        }
        
        public string attachmentDelete(int id) {
            return base.Channel.attachmentDelete(id);
        }
        
        public System.Threading.Tasks.Task<string> attachmentDeleteAsync(int id) {
            return base.Channel.attachmentDeleteAsync(id);
        }
        
        public string commentCreate(string dateComment, string commentUser, int user_id, int task_id) {
            return base.Channel.commentCreate(dateComment, commentUser, user_id, task_id);
        }
        
        public System.Threading.Tasks.Task<string> commentCreateAsync(string dateComment, string commentUser, int user_id, int task_id) {
            return base.Channel.commentCreateAsync(dateComment, commentUser, user_id, task_id);
        }
        
        public System.Data.DataSet commentReadById(int id) {
            return base.Channel.commentReadById(id);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> commentReadByIdAsync(int id) {
            return base.Channel.commentReadByIdAsync(id);
        }
        
        public System.Data.DataSet commentReadByTaskId(int id) {
            return base.Channel.commentReadByTaskId(id);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> commentReadByTaskIdAsync(int id) {
            return base.Channel.commentReadByTaskIdAsync(id);
        }
        
        public System.Data.DataSet commentReadAll() {
            return base.Channel.commentReadAll();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> commentReadAllAsync() {
            return base.Channel.commentReadAllAsync();
        }
        
        public string timeTrackCreate(string startTime, string endTime, string isFinished, int user_id, int task_id) {
            return base.Channel.timeTrackCreate(startTime, endTime, isFinished, user_id, task_id);
        }
        
        public System.Threading.Tasks.Task<string> timeTrackCreateAsync(string startTime, string endTime, string isFinished, int user_id, int task_id) {
            return base.Channel.timeTrackCreateAsync(startTime, endTime, isFinished, user_id, task_id);
        }
        
        public System.Data.DataSet timeTrackReadById(int id) {
            return base.Channel.timeTrackReadById(id);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> timeTrackReadByIdAsync(int id) {
            return base.Channel.timeTrackReadByIdAsync(id);
        }
        
        public System.Data.DataSet timeTrackReadByTaskId(int id) {
            return base.Channel.timeTrackReadByTaskId(id);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> timeTrackReadByTaskIdAsync(int id) {
            return base.Channel.timeTrackReadByTaskIdAsync(id);
        }
        
        public System.Data.DataSet timeTrackReadAll() {
            return base.Channel.timeTrackReadAll();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> timeTrackReadAllAsync() {
            return base.Channel.timeTrackReadAllAsync();
        }
        
        public string timeTrackUpdate(int id, string startTime, string endTime, string isFinished, int user_id, int task_id) {
            return base.Channel.timeTrackUpdate(id, startTime, endTime, isFinished, user_id, task_id);
        }
        
        public System.Threading.Tasks.Task<string> timeTrackUpdateAsync(int id, string startTime, string endTime, string isFinished, int user_id, int task_id) {
            return base.Channel.timeTrackUpdateAsync(id, startTime, endTime, isFinished, user_id, task_id);
        }
        
        public string timeTrackDelete(int id) {
            return base.Channel.timeTrackDelete(id);
        }
        
        public System.Threading.Tasks.Task<string> timeTrackDeleteAsync(int id) {
            return base.Channel.timeTrackDeleteAsync(id);
        }
        
        public string memberCreate(int user_id, int task_id) {
            return base.Channel.memberCreate(user_id, task_id);
        }
        
        public System.Threading.Tasks.Task<string> memberCreateAsync(int user_id, int task_id) {
            return base.Channel.memberCreateAsync(user_id, task_id);
        }
        
        public System.Data.DataSet memberReadById(int user_id, int task_id) {
            return base.Channel.memberReadById(user_id, task_id);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> memberReadByIdAsync(int user_id, int task_id) {
            return base.Channel.memberReadByIdAsync(user_id, task_id);
        }
        
        public System.Data.DataSet memberReadByTaskId(int task_id) {
            return base.Channel.memberReadByTaskId(task_id);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> memberReadByTaskIdAsync(int task_id) {
            return base.Channel.memberReadByTaskIdAsync(task_id);
        }
        
        public System.Data.DataSet memberReadAll() {
            return base.Channel.memberReadAll();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> memberReadAllAsync() {
            return base.Channel.memberReadAllAsync();
        }
        
        public string memberDelete(int user_id, int task_id) {
            return base.Channel.memberDelete(user_id, task_id);
        }
        
        public System.Threading.Tasks.Task<string> memberDeleteAsync(int user_id, int task_id) {
            return base.Channel.memberDeleteAsync(user_id, task_id);
        }
    }
}
